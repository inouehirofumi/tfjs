{"version":3,"sources":["components/templates/Template.tsx","components/Segmentation.tsx","components/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Template","children","title","console","log","BottomNavigation","showLabels","value","BottomNavigationAction","component","Link","to","label","icon","Buttons","isCameraEnable","setCameraEnable","isCaptured","setCaptured","setShutter","shutter","setDetected","isDetected","facingMode","setFacingMode","isBackgroundEnable","setBackgroundEnable","processing","style","display","justifyContent","alignItems","IconButton","disabled","color","onClick","Switch","defaultChecked","onChange","Canvas","webcamRef","width","height","setProcessing","setCapturedTime","capturedTime","background","peopleCount","setPeopleCount","screenshotRef","useRef","drawCanvasRef","detectRef","useState","model","setModel","predictions","setPredictions","Image","screenshot","setScreenshot","canvasRef","GetScreenshot","a","current","webcamCurrent","video","readyState","imgSrc","getScreenshot","img","src","date","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","onload","Detect","segmentMultiPersonParts","preds","length","DrawCanvas","naturalWidth","naturalHeight","canvas","mask","bodyPix","context","getContext","drawImage","LoadModel","architecture","outputStride","multiplier","quantBytes","bodypix","useEffect","audio","ref","videoConstraints","margin","textAlign","zIndex","CircularProgress","Segmentation","setBackgroudEnable","getWindowDimensions","window","innerWidth","innerHeight","windowDimensions","setWindowDimensions","onResize","addEventListener","removeEventListener","UseWindowDimensions","setBackground","Settings","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.6f20bf29.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport CameraAltIcon from '@material-ui/icons/CameraAlt';\nimport SettingsIcon from '@material-ui/icons/Settings';\n\ninterface TemplateProps {\n    children: React.ReactNode\n    title: string\n}\n\nexport const Template: React.FC<TemplateProps> = ({\n    children,\n    title\n}) => {\n    console.log(title);\n\n    return (\n        <>\n            <div>\n                {children}\n            </div>\n            <BottomNavigation\n                showLabels\n                value={title}\n            >\n                <BottomNavigationAction\n                    component={Link}\n                    to='/segmentation'\n                    value='segmentation'\n                    label='photo'\n                    icon={<CameraAltIcon/>}\n                />\n                <BottomNavigationAction\n                    component={Link}\n                    to='/settings'\n                    value='settings'\n                    label='settings'\n                    icon={<SettingsIcon/>}\n                />\n            </BottomNavigation>\n        </>\n    );\n}","import React, { useState, useEffect, useRef } from 'react';\nimport Switch from '@material-ui/core/Switch';\nimport { IconButton } from '@material-ui/core';\nimport FlipCameraIosIcon from '@material-ui/icons/FlipCameraIos';\nimport CameraAltIcon from '@material-ui/icons/CameraAlt';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Webcam from 'react-webcam';\nimport '@tensorflow/tfjs-backend-cpu';\nimport * as bodyPix from '@tensorflow-models/body-pix';\nimport { Template } from './templates/Template';\n\nconst UseWindowDimensions = () => {\n    const getWindowDimensions = () => {\n        const { innerWidth: width, innerHeight: height } = window;\n        return { width, height }\n    }\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n    useEffect(() => {\n        const onResize = () => {\n            setWindowDimensions(getWindowDimensions());\n        }\n        window.addEventListener('resize', onResize);\n        return () => window.removeEventListener('resize', onResize);\n    }, []);\n    return windowDimensions;\n}\n\ninterface ButtonsProps {\n    isCameraEnable: boolean\n    setCameraEnable: Function\n    isCaptured: boolean\n    setCaptured: Function\n    shutter: boolean\n    setShutter: Function\n    isDetected: boolean\n    setDetected: Function\n    facingMode: string\n    setFacingMode: Function\n    isBackgroundEnable: boolean\n    setBackgroundEnable: Function\n    processing: boolean\n}\nconst Buttons: React.FC<ButtonsProps> = ({\n    isCameraEnable,\n    setCameraEnable,\n    isCaptured,\n    setCaptured,\n    shutter,\n    setShutter,\n    isDetected,\n    setDetected,\n    facingMode,\n    setFacingMode,\n    isBackgroundEnable,\n    setBackgroundEnable,\n    processing\n}) => {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                justifyContent: 'space-around',\n                alignItems: 'center'\n            }}\n        >\n            {/* camera start or capture button */}\n            <IconButton disabled={processing}>\n                {isCaptured ||\n                    <CameraAltIcon color={processing ? 'disabled' : 'primary'} onClick={() => setShutter(true)}/>\n                }\n                {isCaptured &&\n                    <CameraAltIcon \n                        color={processing ? 'disabled' : 'primary'} \n                        onClick={() => {\n                            setCaptured(false)\n                            setDetected(false)\n                        }}\n                    />\n                }\n            </IconButton>\n\n            {/* select camera */}\n            <IconButton disabled={isCaptured || processing}>\n                {(isCaptured) && \n                    <FlipCameraIosIcon color='disabled'/>\n                }\n                {isCaptured ||\n                    <>\n                        {facingMode === 'user' &&\n                            <FlipCameraIosIcon color={processing ? 'disabled' : 'primary'} onClick={() => setFacingMode('environment')}/>\n                        }\n                        {facingMode === 'environment' &&\n                            <FlipCameraIosIcon color={processing ? 'disabled' : 'primary'} onClick={() => setFacingMode('user')}/>\n                        }\n                    </>\n                }\n            </IconButton>\n\n            {/* background */}\n            <Switch defaultChecked color='primary' disabled={!isCaptured} onChange={() => setBackgroundEnable(!isBackgroundEnable)} />\n\n            {/* upload */}\n            <IconButton disabled={true}>\n                <CloudUploadIcon color='disabled'/>\n            </IconButton>\n        </div>\n    );\n}\n\ninterface CanvasProps {\n    webcamRef: any\n    facingMode: string\n    width: number\n    height: number\n    isCaptured: boolean\n    setCaptured: Function\n    isBackgroundEnable: boolean\n    shutter: boolean\n    setShutter: Function\n    isDetected: boolean\n    setDetected: Function\n    processing: boolean\n    setProcessing: Function\n    capturedTime: string\n    setCapturedTime: Function\n    peopleCount: number\n    setPeopleCount: Function\n    background: HTMLImageElement\n}\n\nconst Canvas: React.FC<CanvasProps> = ({\n    webcamRef,\n    facingMode,\n    width,\n    height,\n    isCaptured,\n    setCaptured,\n    isBackgroundEnable,\n    shutter,\n    setShutter,\n    isDetected,\n    setDetected,\n    processing,\n    setProcessing,\n    capturedTime,\n    setCapturedTime,\n    peopleCount,\n    setPeopleCount,\n    background\n}) => {\n    const screenshotRef = useRef(true);\n    const drawCanvasRef = useRef(true);\n    const detectRef = useRef(true);\n    const [model, setModel] = useState<any>(null);\n    const [predictions, setPredictions] = useState<any>(null);\n    const [screenshot, setScreenshot] = useState<HTMLImageElement>(new Image);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    const GetScreenshot = async () => {\n        console.log('start screenshot.');\n        if (webcamRef.current) {\n            const webcamCurrent = webcamRef.current as any;\n            console.log('webcam ready.')\n            if (webcamCurrent.video.readyState === 4) {\n                const imgSrc = webcamRef.current?.getScreenshot();\n                let img = new Image;\n                img.src = imgSrc;\n                const date = new Date();\n                setCapturedTime(date.getFullYear()+'/'+(date.getMonth()+1)+'/'+date.getDate()+' '+date.getHours()+':'+date.getMinutes()+':'+date.getSeconds());\n                img.onload = () => {\n                    console.log('end screenshot.');\n                    setScreenshot(img);\n                    setShutter(false);\n                    setCaptured(true);\n                }\n            }\n        }\n    }\n    const Detect = async () => {\n        setPredictions(null);\n        if (isCaptured) {\n            console.log('detect start.');\n            setProcessing(true);\n            /*\n            const preds = await model.segmentMultiPerson(screenshot, {\n                flipHorizontal: false,\n                internalResolution: 'medium',\n                segmentationThreshold: 0.7\n            });\n            */\n           const preds = await model.segmentMultiPersonParts(screenshot);\n            console.log('detect end.');\n            if (preds.length) {\n                console.log(preds);\n                setPredictions(preds);\n            } else {\n                console.log('no detection.');\n            }\n            setProcessing(false);\n            setDetected(true);\n        }\n    }\n    const DrawCanvas = async () => {\n        if (isCaptured) {\n            if (canvasRef.current) {\n                console.log('canvas ready.');\n                console.log(canvasRef.current.width);\n                console.log(screenshot.naturalWidth);\n                canvasRef.current.width = screenshot.naturalWidth;\n                canvasRef.current.height = screenshot.naturalHeight;\n                /*\n                const context = canvasRef.current.getContext('2d');\n                const tempCanvas = document.createElement('canvas');\n                tempCanvas.width = screenshot.naturalWidth;\n                tempCanvas.height = screenshot.naturalHeight;\n                const tempContext = tempCanvas.getContext('2d');\n                if (isBackgroundEnable) {\n                    context?.drawImage(screenshot, 0, 0);\n                }\n                context?.save();\n                let count: number = 0;\n                if (predictions) {\n                    predictions.forEach((prediction: any) => {\n                        count++;\n                        const frontColor = {r: 255, g: 0, b: 0, a: 128};\n                        const backColor = {r: 0, g: 0, b: 0, a: 0};\n                        const mask: any = bodyPix.toMask(prediction, frontColor, backColor);\n                        tempContext?.putImageData(mask, 0, 0);\n                    })\n                }\n                if (context) {\n                    context.globalCompositeOperation = 'destination-out';\n                    context.drawImage(tempCanvas, 0, 0, canvasRef.current.width, canvasRef.current.height);\n                    context.restore();\n\n                    const date = new Date();\n                    context.fillStyle = 'rgb(255, 0, 0)';\n                    context.fillText(\n                        capturedTime+' count: '+count, 0, 10\n                    );\n                }\n                */\n                const opacity = 0.7;\n                const flipHorizontal = false;\n                const maskBlurAmount = 0;\n                const canvas = canvasRef.current;\n                //const mask = bodyPix.toMask(predictions)\n                if (predictions) {\n                    const mask = bodyPix.toColoredPartMask(predictions);\n                    if (isBackgroundEnable) {\n                        bodyPix.drawMask(\n                            canvas,\n                            screenshot,\n                            mask,\n                            opacity,\n                            maskBlurAmount,\n                            flipHorizontal\n                        );\n                    } else {\n                        bodyPix.drawMask(\n                            canvas,\n                            background,\n                            mask,\n                            opacity,\n                            maskBlurAmount,\n                            flipHorizontal\n                        );\n                    }\n                } else {\n                    const context = canvasRef.current.getContext('2d');\n                    if (context) {\n                        if (isBackgroundEnable) {\n                            context.drawImage(screenshot, 0, 0);\n                        } else {\n                            context.drawImage(background, 0, 0);\n                        }\n                    }\n                }\n\n\n                console.log('drawn.');\n            }\n        }\n    }\n    const LoadModel = async () => {\n        console.log('start model loading.');\n        setProcessing(true);\n        const bodypix = await bodyPix.load({\n            architecture: 'MobileNetV1',\n            outputStride: 16,\n            multiplier: 0.75,\n            quantBytes: 2\n        });\n        setModel(bodypix);\n        setProcessing(false);\n        console.log('model loaded.')\n    }\n    useEffect(() => {\n        LoadModel();\n    }, []);\n\n    useEffect(() => {\n        if (screenshotRef.current) {\n            screenshotRef.current = false;\n            return;\n        }\n        GetScreenshot();\n    }, [shutter]);\n\n    useEffect(() => {\n        if (drawCanvasRef.current) {\n            drawCanvasRef.current = false;\n            return;\n        }\n        Detect();\n    }, [isCaptured])\n\n    useEffect(() => {\n        if (detectRef.current) {\n            detectRef.current = false;\n            return;\n        }\n        DrawCanvas();\n    }, [isDetected, isBackgroundEnable])\n\n    console.log('shutter', shutter, 'processing', processing, 'isCaptured', isCaptured, 'condition', (isCaptured && !processing));\n    return (\n        <div \n            style={{\n                width: width, \n                height: height*0.9,\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n            }}\n        >\n            {(!isCaptured && !processing) &&\n                <Webcam\n                    audio={false}\n                    ref={webcamRef}\n                    videoConstraints={{\n                        facingMode: facingMode\n                    }}\n                    style={{\n                        margin: 'auto',\n                        textAlign: 'center',\n                        zIndex: 9,\n                        width: '100%',\n                        height: '100%'\n                    }}\n                />\n            }\n            {processing && \n                <CircularProgress \n                />\n            }\n            {(isCaptured && !processing) && \n                <>\n                    <canvas\n                        ref={canvasRef}\n                        style={{\n                            margin: 'auto',\n                            width: '100%',\n                            height: '100%',\n                            zIndex: 30\n                        }}\n                    />\n                </>\n            }\n        </div>\n    );\n}\n\ninterface SegmentationProps {\n    background: HTMLImageElement\n}\n\nexport const Segmentation: React.FC<SegmentationProps> = ({\n    background,\n}) => {\n    const [isCameraEnable, setCameraEnable] = useState<boolean>(true);\n    const [isCaptured, setCaptured] = useState<boolean>(false);\n    const [shutter, setShutter] = useState<boolean>(false);\n    const [isDetected, setDetected] = useState<boolean>(false);\n    const [isBackgroundEnable, setBackgroudEnable] = useState<boolean>(true);\n    const [facingMode, setFacingMode] = useState<string>('user');\n    const [processing, setProcessing] = useState<boolean>(false);\n    const [capturedTime, setCapturedTime] = useState<string>('');\n    const [peopleCount, setPeopleCount] = useState<number>(0);\n    const { width, height } = UseWindowDimensions();\n    const webcamRef = useRef<Webcam>(null);\n    return (\n        <Template title='segmentation'>\n            <Buttons\n                isCameraEnable={isCameraEnable}\n                setCameraEnable={setCameraEnable}\n                isCaptured={isCaptured}\n                setCaptured={setCaptured}\n                shutter={shutter}\n                setShutter={setShutter}\n                isDetected={isDetected}\n                setDetected={setDetected}\n                facingMode={facingMode}\n                setFacingMode={setFacingMode}\n                isBackgroundEnable={isBackgroundEnable}\n                setBackgroundEnable={setBackgroudEnable}\n                processing={processing}\n            />\n            <Canvas\n                webcamRef={webcamRef}\n                facingMode={facingMode}\n                width={width}\n                height={height}\n                isCaptured={isCaptured}\n                setCaptured={setCaptured}\n                isBackgroundEnable={isBackgroundEnable}\n                shutter={shutter}\n                setShutter={setShutter}\n                isDetected={isDetected}\n                setDetected={setDetected}\n                processing={processing}\n                setProcessing={setProcessing}\n                capturedTime={capturedTime}\n                setCapturedTime={setCapturedTime}\n                peopleCount={peopleCount}\n                setPeopleCount={setPeopleCount}\n                background={background}\n            />\n        </Template>\n    );\n}","import React, { useState, useEffect, useRef } from 'react';\nimport { IconButton } from '@material-ui/core';\nimport CameraAltIcon from '@material-ui/icons/CameraAlt';\nimport FlipCameraIosIcon from '@material-ui/icons/FlipCameraIos';\nimport { Template } from './templates/Template';\nimport Webcam from 'react-webcam';\nimport { Flip } from '@material-ui/icons';\nimport { setBackend } from '@tensorflow/tfjs-core';\n\nconst UseWindowDimensions = () => {\n    const getWindowDimensions = () => {\n        const { innerWidth: width, innerHeight: height } = window;\n        return { width, height }\n    }\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n    useEffect(() => {\n        const onResize = () => {\n            setWindowDimensions(getWindowDimensions());\n        }\n        window.addEventListener('resize', onResize);\n        return () => window.removeEventListener('resize', onResize);\n    }, []);\n    return windowDimensions;\n}\n\ninterface ButtonsProps {\n    \n    isCaptured: boolean\n    setCaptured: Function\n    facingMode: string\n    setFacingMode: Function\n    shutter: boolean\n    setShutter: Function\n}\n\nconst Buttons: React.FC<ButtonsProps> = ({\n    isCaptured,\n    setCaptured,\n    facingMode,\n    setFacingMode,\n    shutter,\n    setShutter,\n}) => {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                justifyContent: 'space-around',\n                alignItems: 'center'\n            }}\n        >\n            <IconButton>\n                <CameraAltIcon \n                    color='primary' \n                    onClick={() => {\n                        if (!isCaptured) {\n                            setShutter(true);\n                        } else {\n                            setCaptured(false);\n                        }\n                    }}\n                />\n            </IconButton>\n            <IconButton disabled={isCaptured}>\n                <FlipCameraIosIcon\n                    color={isCaptured ? 'disabled' : 'primary'}\n                    onClick={() => {\n                        if (facingMode === 'user') {\n                            setFacingMode('environment');\n                        } else if (facingMode === 'environment') {\n                            setFacingMode('user');\n                        }\n                    }}\n                />\n            </IconButton>\n        </div>\n    );\n}\n\ninterface CanvasProps {\n    webcamRef: any\n    isCaptured: boolean\n    setCaptured: Function\n    facingMode: string\n    shutter: boolean\n    setShutter: Function\n    background: HTMLImageElement\n    setBackground: Function\n    width: number\n    height: number\n}\n\nconst Canvas: React.FC<CanvasProps> = ({\n    webcamRef,\n    isCaptured,\n    setCaptured,\n    facingMode,\n    shutter,\n    setShutter,\n    background,\n    setBackground,\n    width,\n    height\n}) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const GetScreenshot = async () => {\n        if (webcamRef.current) {\n            const webcamCurrent = webcamRef.current as any;\n            console.log('webcam ready.')\n            if (webcamCurrent.video.readyState === 4) {\n                const imgSrc = webcamRef.current?.getScreenshot();\n                let img = new Image;\n                img.src = imgSrc;\n                img.onload = () => {\n                    setBackground(img);\n                    setShutter(false);\n                    setCaptured(true);\n                }\n            }\n        }\n    }\n    const DrawCanvas = async () => {\n        if (isCaptured) {\n            if (canvasRef.current) {\n                canvasRef.current.width = background.naturalWidth;\n                canvasRef.current.height = background.naturalHeight;\n                const context = canvasRef.current.getContext('2d');\n                context?.drawImage(background, 0, 0);\n            }\n        }\n    }\n\n    useEffect(() => {\n        GetScreenshot();\n    }, [shutter]);\n\n    useEffect(() => {\n        DrawCanvas();\n    }, [isCaptured]);\n\n    return (\n        <div\n            style={{\n                width: width,\n                height: height*0.9\n            }}\n        >\n            {!isCaptured &&\n                <Webcam\n                    audio={false}\n                    ref={webcamRef}\n                    videoConstraints={{\n                        facingMode: facingMode\n                    }}\n                    style={{\n                        margin: 'auto',\n                        textAlign: 'center',\n                        zIndex: 9,\n                        width: '100%',\n                        height: '100%'\n                    }}\n                />\n            }\n            {isCaptured &&\n                <>\n                    <canvas\n                        ref={canvasRef}\n                        style={{\n                            margin: 'auto',\n                            width: '100%',\n                            height: '100%',\n                            zIndex: 30\n                        }}\n                    />\n                </>\n            }\n        </div>\n    );\n}\n\ninterface SettingsProps {\n    background: HTMLImageElement\n    setBackground: Function\n}\n\nexport const Settings: React.FC<SettingsProps> = ({\n    background,\n    setBackground\n}) => {\n    const { width, height } = UseWindowDimensions();\n    const [isCaptured, setCaptured] = useState<boolean>(false);\n    const [facingMode, setFacingMode] = useState<string>('user');\n    const [shutter, setShutter] = useState<boolean>(false);\n    const webcamRef = useRef<Webcam>(null);\n    return (\n        <Template title='settings'>\n            <Buttons \n                isCaptured={isCaptured}\n                setCaptured={setCaptured}\n                facingMode={facingMode}\n                setFacingMode={setFacingMode}\n                shutter={shutter}\n                setShutter={setShutter}\n            />\n            <Canvas\n                webcamRef={webcamRef}\n                isCaptured={isCaptured}\n                setCaptured={setCaptured}\n                facingMode={facingMode}\n                shutter={shutter}\n                setShutter={setShutter}\n                background={background}\n                setBackground={setBackground}\n                width={width}\n                height={height}\n            />\n        </Template>\n    )\n}","import React, { useState } from 'react';\n// import { Detector } from './components/Detector';\n// import { Camera } from './components/Webcam';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from 'react-router-dom';\nimport { ObjectDetector } from './components/OD';\nimport { Segmentation } from './components/Segmentation';\nimport { Canvas } from './components/Canvas';\nimport { Settings } from './components/Settings';\n\n\nconst App: React.FC = () => {\n  const [background, setBackground] = useState<HTMLImageElement>(new Image);\n  return (\n    <BrowserRouter> \n      <Switch>\n        {/*\n        <Route path='/objectdetector'>\n          <ObjectDetector />\n        </Route>\n        <Route path='/canvas'>\n          <Canvas />\n        </Route>\n        */}\n        <Route path='/segmentation'>\n          <Segmentation\n            background={background}\n          />\n        </Route>\n        <Route path='/settings'>\n          <Settings \n            background={background}\n            setBackground={setBackground}\n          />\n        </Route>\n      </Switch>\n      <Link to='/segmentation'>segmentation</Link>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}