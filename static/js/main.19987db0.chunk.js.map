{"version":3,"sources":["components/OD.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Buttons","isCameraEnable","setCameraEnable","isCaptured","setCaptured","setShutter","shutter","facingMode","setFacingMode","isBackgroundEnable","setBackgroundEnable","processing","style","display","justifyContent","alignItems","IconButton","disabled","color","onClick","Switch","defaultChecked","onChange","Canvas","webcamRef","width","height","setProcessing","screenshotRef","useRef","drawCanvasRef","detectRef","useState","model","setModel","predictions","setPredictions","Image","screenshot","setScreenshot","isDetected","setDetected","canvasRef","GetScreenshot","a","console","log","current","webcamCurrent","video","readyState","imgSrc","getScreenshot","img","src","onload","Detect","detect","preds","length","DrawCanvas","naturalWidth","naturalHeight","context","getContext","drawImage","forEach","prediction","class","score","bbox","strokeRect","LoadModel","cocoSsd","cocossd","useEffect","border","audio","ref","videoConstraints","margin","textAlign","zIndex","CircularProgress","ObjectDetector","setBackgroudEnable","getWindowDimensions","window","innerWidth","innerHeight","windowDimensions","setWindowDimensions","onResize","addEventListener","removeEventListener","UseWindowDimensions","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19987db0.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Switch from '@material-ui/core/Switch';\nimport { IconButton } from '@material-ui/core';\nimport FlipCameraIosIcon from '@material-ui/icons/FlipCameraIos';\nimport CameraAltIcon from '@material-ui/icons/CameraAlt';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Webcam from 'react-webcam';\nimport '@tensorflow/tfjs-backend-cpu';\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\n\nconst UseWindowDimensions = () => {\n    const getWindowDimensions = () => {\n        const { innerWidth: width, innerHeight: height } = window;\n        return { width, height }\n    }\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n    useEffect(() => {\n        const onResize = () => {\n            setWindowDimensions(getWindowDimensions());\n        }\n        window.addEventListener('resize', onResize);\n        return () => window.removeEventListener('resize', onResize);\n    }, []);\n    return windowDimensions;\n}\n\ninterface ButtonsProps {\n    isCameraEnable: boolean\n    setCameraEnable: Function\n    isCaptured: boolean\n    setCaptured: Function\n    shutter: boolean\n    setShutter: Function\n    facingMode: string\n    setFacingMode: Function\n    isBackgroundEnable: boolean\n    setBackgroundEnable: Function\n    processing: boolean\n}\nconst Buttons: React.FC<ButtonsProps> = ({\n    isCameraEnable,\n    setCameraEnable,\n    isCaptured,\n    setCaptured,\n    shutter,\n    setShutter,\n    facingMode,\n    setFacingMode,\n    isBackgroundEnable,\n    setBackgroundEnable,\n    processing\n}) => {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                justifyContent: 'space-around',\n                alignItems: 'center'\n            }}\n        >\n            {/* camera start or capture button */}\n            <IconButton disabled={processing}>\n                {isCaptured ||\n                    <CameraAltIcon color={processing ? 'disabled' : 'primary'} onClick={() => setShutter(true)}/>\n                }\n                {isCaptured &&\n                    <CameraAltIcon color={processing ? 'disabled' : 'primary'} onClick={() => setCaptured(false)}/>\n                }\n            </IconButton>\n\n            {/* select camera */}\n            <IconButton disabled={isCaptured || processing}>\n                {(isCaptured) && \n                    <FlipCameraIosIcon color='disabled'/>\n                }\n                {isCaptured ||\n                    <>\n                        {facingMode === 'user' &&\n                            <FlipCameraIosIcon color={processing ? 'disabled' : 'primary'} onClick={() => setFacingMode('environment')}/>\n                        }\n                        {facingMode === 'environment' &&\n                            <FlipCameraIosIcon color={processing ? 'disabled' : 'primary'} onClick={() => setFacingMode('user')}/>\n                        }\n                    </>\n                }\n            </IconButton>\n\n            {/* background */}\n            <Switch defaultChecked color='primary' disabled={!isCaptured} onChange={() => setBackgroundEnable(!isBackgroundEnable)} />\n\n            {/* upload */}\n            <IconButton disabled={true}>\n                <CloudUploadIcon color='disabled'/>\n            </IconButton>\n        </div>\n    );\n}\n\ninterface CanvasProps {\n    webcamRef: any\n    facingMode: string\n    width: number\n    height: number\n    isCaptured: boolean\n    setCaptured: Function\n    isBackgroundEnable: boolean\n    shutter: boolean\n    setShutter: Function\n    processing: boolean\n    setProcessing: Function\n}\n\nconst Canvas: React.FC<CanvasProps> = ({\n    webcamRef,\n    facingMode,\n    width,\n    height,\n    isCaptured,\n    setCaptured,\n    isBackgroundEnable,\n    shutter,\n    setShutter,\n    processing,\n    setProcessing\n}) => {\n    const screenshotRef = useRef(true);\n    const drawCanvasRef = useRef(true);\n    const detectRef = useRef(true);\n    const [model, setModel] = useState<any>(null);\n    const [predictions, setPredictions] = useState<any>(null);\n    const [screenshot, setScreenshot] = useState<HTMLImageElement>(new Image);\n    const [isDetected, setDetected] = useState<boolean>(false);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const GetScreenshot = async () => {\n        console.log('start screenshot.');\n        if (webcamRef.current) {\n            const webcamCurrent = webcamRef.current as any;\n            console.log('webcam ready.')\n            if (webcamCurrent.video.readyState === 4) {\n                const imgSrc = webcamRef.current?.getScreenshot();\n                let img = new Image;\n                img.src = imgSrc;\n                img.onload = () => {\n                    console.log('end screenshot.');\n                    setScreenshot(img);\n                    setShutter(false);\n                    setCaptured(true);\n                }\n            }\n        }\n    }\n    const Detect = async () => {\n        console.log('detect start.');\n        setProcessing(true);\n        const preds = await model.detect(screenshot);\n        console.log('detect end.');\n        if (preds.length) {\n            console.log(predictions);\n            setPredictions(preds);\n        }\n        setProcessing(false);\n        setDetected(true);\n    }\n    const DrawCanvas = async () => {\n        if (isCaptured) {\n            if (canvasRef.current) {\n                console.log('canvas ready.');\n                canvasRef.current.width = screenshot.naturalWidth;\n                canvasRef.current.height = screenshot.naturalHeight;\n                const context = canvasRef.current.getContext('2d');\n                if (isBackgroundEnable) {\n                    context?.drawImage(screenshot, 0, 0);\n                }\n                predictions.forEach((prediction: any) => {\n                    if (prediction.class === 'person' && prediction.score >= 0.5) {\n                        const bbox = prediction.bbox;\n                        context?.strokeRect(bbox[0], bbox[1], bbox[2], bbox[3]);\n                    }\n                })\n                console.log('drawn.');\n            }\n        }\n        /*\n        setProcessing(true);\n        if (isCaptured) {\n            if (webcamRef.current && canvasRef.current) {\n                console.log('webcam and canvas are ready.');\n                const webcamCurrent = webcamRef.current as any;\n                const ctx = canvasRef.current.getContext('2d');\n                await setTimeout(() => {\n                    console.log('wait')\n                    console.log(webcamCurrent.video.readyState);\n                    if (webcamCurrent.video.readyState === 4) {\n                        console.log('webcam current ready state is 4.');\n                        const imgSrc = webcamRef.current?.getScreenshot();\n                        let img = new Image;\n                        img.src = imgSrc;\n                        console.log(img);\n                        ctx?.drawImage(img, 0, 0);\n\n                        setProcessing(false);\n                    }\n                }, 100);\n            }\n        }\n        */\n    }\n    const LoadModel = async () => {\n        console.log('start model loading.');\n        setProcessing(true);\n        const cocossd = await cocoSsd.load();\n        setModel(cocossd);\n        setProcessing(false);\n        console.log('model loaded.')\n    }\n    useEffect(() => {\n        LoadModel();\n    }, []);\n\n    useEffect(() => {\n        if (screenshotRef.current) {\n            screenshotRef.current = false;\n            return;\n        }\n        GetScreenshot();\n    }, [shutter]);\n\n    useEffect(() => {\n        if (drawCanvasRef.current) {\n            drawCanvasRef.current = false;\n            return;\n        }\n        Detect();\n    }, [isCaptured])\n\n    useEffect(() => {\n        if (detectRef.current) {\n            detectRef.current = false;\n            return;\n        }\n        DrawCanvas();\n    }, [isDetected, isBackgroundEnable])\n\n    console.log('shutter', shutter, 'processing', processing, 'isCaptured', isCaptured, 'condition', (isCaptured && !processing));\n    return (\n        <div \n            style={{\n                width: width, \n                height: height*0.9,\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                border: '1px solid',\n            }}\n        >\n            {(!isCaptured && !processing) &&\n                <Webcam\n                    audio={false}\n                    ref={webcamRef}\n                    videoConstraints={{\n                        facingMode: facingMode\n                    }}\n                    style={{\n                        margin: 'auto',\n                        textAlign: 'center',\n                        zIndex: 9,\n                        width: '100%',\n                        height: '100%'\n                    }}\n                />\n            }\n            {processing && \n                <CircularProgress \n                />\n            }\n            {(isCaptured && !processing) && \n                <>\n                    <canvas\n                        ref={canvasRef}\n                        style={{\n                            margin: 'auto',\n                            width: '100%',\n                            height: '100%',\n                            border: '1px solid',\n                            zIndex: 30\n                        }}\n                    />\n                </>\n            }\n        </div>\n    );\n}\n\nexport const ObjectDetector: React.FC = () => {\n    const [isCameraEnable, setCameraEnable] = useState<boolean>(true);\n    const [isCaptured, setCaptured] = useState<boolean>(false);\n    const [shutter, setShutter] = useState<boolean>(false);\n    const [isBackgroundEnable, setBackgroudEnable] = useState<boolean>(true);\n    const [facingMode, setFacingMode] = useState<string>('user');\n    const [processing, setProcessing] = useState<boolean>(false);\n    const { width, height } = UseWindowDimensions();\n    const webcamRef = useRef<Webcam>(null);\n    return (\n        <div>\n            <Buttons\n                isCameraEnable={isCameraEnable}\n                setCameraEnable={setCameraEnable}\n                isCaptured={isCaptured}\n                setCaptured={setCaptured}\n                shutter={shutter}\n                setShutter={setShutter}\n                facingMode={facingMode}\n                setFacingMode={setFacingMode}\n                isBackgroundEnable={isBackgroundEnable}\n                setBackgroundEnable={setBackgroudEnable}\n                processing={processing}\n            />\n            <Canvas\n                webcamRef={webcamRef}\n                facingMode={facingMode}\n                width={width}\n                height={height}\n                isCaptured={isCaptured}\n                setCaptured={setCaptured}\n                isBackgroundEnable={isBackgroundEnable}\n                shutter={shutter}\n                setShutter={setShutter}\n                processing={processing}\n                setProcessing={setProcessing}\n            />\n        </div>\n    );\n}","import React from 'react';\n// import { Detector } from './components/Detector';\n// import { Camera } from './components/Webcam';\nimport { ObjectDetector } from './components/OD';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      {/* <Detector /> */}\n      {/* <Camera /> */}\n      <ObjectDetector />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}