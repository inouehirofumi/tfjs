{"version":3,"sources":["components/OD.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["UseWindowDimensions","getWindowDimensions","window","width","innerWidth","height","innerHeight","useState","windowDimensions","setWindowDimensions","useEffect","onResize","addEventListener","removeEventListener","Buttons","isCameraEnable","setCameraEnable","isCaptured","setCaptured","facingMode","setFacingMode","processing","isBackgroundEnable","setBackgroundEnable","console","log","IconButton","disabled","color","onClick","Switch","defaultChecked","Canvas","webcamRef","canvasRef","setProcessing","setModel","LoadModel","a","cocoSsd","cocossd","style","display","justifyContent","alignItems","audio","ref","videoConstraints","margin","textAlign","zIndex","CircularProgress","ObjectDetector","setBackgroudEnable","useRef","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6d04762.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Switch from '@material-ui/core/Switch';\nimport { IconButton } from '@material-ui/core';\nimport FlipCameraIosIcon from '@material-ui/icons/FlipCameraIos';\nimport CameraAltIcon from '@material-ui/icons/CameraAlt';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Webcam from 'react-webcam';\nimport '@tensorflow/tfjs-backend-cpu';\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\n\nconst UseWindowDimensions = () => {\n    const getWindowDimensions = () => {\n        const { innerWidth: width, innerHeight: height } = window;\n        return { width, height }\n    }\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n    useEffect(() => {\n        const onResize = () => {\n            setWindowDimensions(getWindowDimensions());\n        }\n        window.addEventListener('resize', onResize);\n        return () => window.removeEventListener('resize', onResize);\n    }, []);\n    return windowDimensions;\n}\n\ninterface ButtonsProps {\n    isCameraEnable: boolean\n    setCameraEnable: Function\n    isCaptured: boolean\n    setCaptured: Function\n    facingMode: string\n    setFacingMode: Function\n    isBackgroundEnable: boolean\n    setBackgroundEnable: Function\n    processing: boolean\n}\nconst Buttons: React.FC<ButtonsProps> = ({\n    isCameraEnable,\n    setCameraEnable,\n    isCaptured,\n    setCaptured,\n    facingMode,\n    setFacingMode,\n    isBackgroundEnable,\n    setBackgroundEnable,\n    processing\n}) => {\n    console.log(isCaptured);\n    console.log(facingMode);\n    return (\n        <div>\n            {/* camera start or capture button */}\n            <IconButton disabled={processing}>\n                {isCaptured ||\n                    <CameraAltIcon color={processing ? 'disabled' : 'primary'} onClick={() => setCaptured(true)}/>\n                }\n                {isCaptured &&\n                    <CameraAltIcon color={processing ? 'disabled' : 'primary'} onClick={() => setCaptured(false)}/>\n                }\n            </IconButton>\n\n            {/* select camera */}\n            <IconButton disabled={isCaptured || processing}>\n                {(isCaptured) && \n                    <FlipCameraIosIcon color='disabled'/>\n                }\n                {isCaptured ||\n                    <>\n                        {facingMode === 'user' &&\n                            <FlipCameraIosIcon color={processing ? 'disabled' : 'primary'} onClick={() => setFacingMode('environment')}/>\n                        }\n                        {facingMode === 'environment' &&\n                            <FlipCameraIosIcon color={processing ? 'disabled' : 'primary'} onClick={() => setFacingMode('user')}/>\n                        }\n                    </>\n                }\n            </IconButton>\n\n            {/* background */}\n            <Switch defaultChecked color='primary' disabled={!isCaptured} />\n\n            {/* upload */}\n            <IconButton disabled={true}>\n                <CloudUploadIcon color='disabled'/>\n            </IconButton>\n        </div>\n    );\n}\n\ninterface CanvasProps {\n    webcamRef: any\n    canvasRef: any\n    facingMode: string\n    width: number\n    height: number\n    isCaptured: boolean\n    processing: boolean\n    setProcessing: Function\n}\n\nconst Canvas: React.FC<CanvasProps> = ({\n    webcamRef,\n    canvasRef,\n    facingMode,\n    width,\n    height,\n    isCaptured,\n    processing,\n    setProcessing\n}) => {\n    const [model, setModel] = useState<any>(null);\n    const DrawCanvas = () => {\n        console.log('draw canvas.');\n    }\n    const LoadModel = async () => {\n        console.log('start model loading.');\n        setProcessing(true);\n        const cocossd = await cocoSsd.load();\n        setModel(cocossd);\n        setProcessing(false);\n        console.log('model loaded.')\n    }\n    useEffect(() => {\n        LoadModel();\n    }, [])\n    return (\n        <div \n            style={{\n                width: width, \n                height: height*0.9,\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center'\n            }}\n        >\n            {(isCaptured || processing) ||\n                <Webcam\n                    audio={false}\n                    ref={webcamRef}\n                    videoConstraints={{\n                        facingMode: facingMode\n                    }}\n                    style={{\n                        margin: 'auto',\n                        textAlign: 'center',\n                        zIndex: 9,\n                        width: '100%',\n                        height: '100%'\n                    }}\n                />\n            }\n            {processing && \n                <CircularProgress \n                />\n            }\n            {/*\n            {processing ||\n                <canvas\n                    ref={canvasRef}\n                    style={{\n                        margin: 'auto',\n                        width: '100%',\n                        height: '100%',\n                        border: '1px solid',\n                    }}\n                />\n            }\n            */}\n        </div>\n    );\n}\n\nexport const ObjectDetector: React.FC = () => {\n    const [isCameraEnable, setCameraEnable] = useState<boolean>(true);\n    const [isCaptured, setCaptured] = useState<boolean>(false);\n    const [isBackgroundEnable, setBackgroudEnable] = useState<boolean>(true);\n    const [facingMode, setFacingMode] = useState<string>('user');\n    const [processing, setProcessing] = useState<boolean>(false);\n    const { width, height } = UseWindowDimensions();\n    const webcamRef = useRef<Webcam>(null);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    console.log(UseWindowDimensions());\n    return (\n        <div>\n            <Buttons\n                isCameraEnable={isCameraEnable}\n                setCameraEnable={setCameraEnable}\n                isCaptured={isCaptured}\n                setCaptured={setCaptured}\n                facingMode={facingMode}\n                setFacingMode={setFacingMode}\n                isBackgroundEnable={isBackgroundEnable}\n                setBackgroundEnable={setBackgroudEnable}\n                processing={processing}\n            />\n            <Canvas\n                canvasRef={canvasRef}\n                webcamRef={webcamRef}\n                facingMode={facingMode}\n                width={width}\n                height={height}\n                isCaptured={isCaptured}\n                processing={processing}\n                setProcessing={setProcessing}\n            />\n        </div>\n    );\n}","import React from 'react';\nimport { Detector } from './components/Detector';\nimport { Camera } from './components/Webcam';\nimport { ObjectDetector } from './components/OD';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      {/* <Detector /> */}\n      {/* <Camera /> */}\n      <ObjectDetector />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}