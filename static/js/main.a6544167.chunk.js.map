{"version":3,"sources":["components/Detector.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Detector","useState","isCaptureEnable","setCaptureEnable","background","setBackground","facingMode","setFacingMode","webcamRef","useRef","canvasRef","runDetect","a","cocoSsd","model","console","log","setInterval","detect","current","webcamCurrent","video","readyState","videoWidth","videoHeight","width","height","predictions","length","count","ctx","getContext","clearRect","forEach","prediction","class","score","bbox","strokeRect","date","Date","fillText","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","useEffect","onClick","audio","ref","videoConstraints","style","position","margin","textAlign","top","left","right","zIndex","visibility","border","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6544167.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport '@tensorflow/tfjs-backend-cpu';\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\nimport Webcam from 'react-webcam';\n\n\nexport const Detector: React.FC = () => {\n    const [isCaptureEnable, setCaptureEnable] = useState<boolean>(false);\n    const [background, setBackground] = useState<boolean>(true);\n    const [facingMode, setFacingMode] = useState<string>('environment');\n    const webcamRef = useRef<Webcam>(null);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const runDetect = async () => {\n       const model = await cocoSsd.load();\n       console.log('model loaded.')\n       setInterval(() => {\n           detect(model);\n       }, 10);\n       detect(model);\n    }\n\n    const detect = async (model: any) => {\n        if (webcamRef.current && canvasRef.current) {\n            console.log('webcam and canvas are ready.');\n            const webcamCurrent = webcamRef.current as any;\n            if (webcamCurrent.video.readyState === 4) {\n                console.log('webcam current ready state is 4.');\n                const video = webcamCurrent.video;\n                const videoWidth = webcamCurrent.video.videoWidth;\n                const videoHeight = webcamCurrent.video.videoHeight;\n                canvasRef.current.width = videoWidth;\n                canvasRef.current.height = videoHeight;\n\n                console.log('detect start.');\n                const predictions = await model.detect(video);\n                console.log('detect end.');\n                if (predictions.length) {\n                    console.log(predictions);\n                }\n\n                console.log('draw.')\n                let count = 0;\n                const ctx = canvasRef.current.getContext('2d');\n                ctx?.clearRect(0, 0, videoWidth, videoHeight);\n                predictions.forEach((prediction: any) => {\n                    if (prediction.class === 'person' && prediction.score >= 0.5) {\n                        count++;\n                        const bbox = prediction.bbox;\n                        ctx?.strokeRect(bbox[0], bbox[1], bbox[2], bbox[3]);\n                    }\n                })\n                const date = new Date();\n                ctx?.fillText(\n                    date.getFullYear()+'/'\n                    +(date.getMonth()+1)+'/'\n                    +date.getDate()+' '\n                    +date.getHours()+':'\n                    +date.getMinutes()+':'\n                    +date.getSeconds()\n                    +' count: '+count, 0, 10\n                );\n            }\n        }\n    }\n\n    useEffect(() => {\n        runDetect();\n    }, []);\n\n    return (\n        <div>\n            {isCaptureEnable || (\n                <button onClick={() => setCaptureEnable(true)}>start</button>\n            )}\n            {isCaptureEnable && (\n                <>\n                    <div>\n                        <button onClick={() => setCaptureEnable(false)}>end</button>\n                        {facingMode === 'user' && (\n                            <button onClick={() => setFacingMode('environment')}>environment</button>\n                        )}\n                        {facingMode === 'environment' && (\n                            <button onClick={() => setFacingMode('user')}>user</button>\n                        )}\n                    </div>\n                    {background || (\n                        <>\n                            <button onClick={() => setBackground(true)}>background on</button>\n                            <Webcam \n                                audio={false} \n                                ref={webcamRef} \n                                videoConstraints={{\n                                    facingMode: facingMode\n                                }}\n                                style={{\n                                    position: 'absolute',\n                                    margin: 'auto',\n                                    textAlign: 'center',\n                                    top: 100,\n                                    left: 0,\n                                    right: 0,\n                                    zIndex: 9,\n                                    width: 640,\n                                    height: 480,\n                                    visibility: 'hidden',\n                                }}\n                            />\n                        </>\n                    )}\n                    {background && (\n                        <>\n                            <button onClick={() => setBackground(false)}>background off</button>\n                            <Webcam \n                                audio={false} \n                                ref={webcamRef} \n                                style={{\n                                    position: 'absolute',\n                                    margin: 'auto',\n                                    textAlign: 'center',\n                                    top: 100,\n                                    left: 0,\n                                    right: 0,\n                                    zIndex: 9,\n                                    width: 640,\n                                    height: 480,\n                                }}\n                            />\n                        </>\n                    )}\n                    <canvas \n                        ref={canvasRef}\n                        style={{\n                            position: 'absolute',\n                            margin: 'auto',\n                            textAlign: 'center',\n                            top: 100,\n                            left: 0,\n                            right: 0,\n                            zIndex: 9,\n                            width: 640,\n                            height: 480,\n                            border: '1px solid',\n                        }}\n\n                    />\n                </>\n            )}\n        </div>\n    );\n}\n\n","import React from 'react';\nimport { Detector } from './components/Detector';\nimport { Camera } from './components/Webcam';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Detector />\n      {/* <Camera /> */}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}