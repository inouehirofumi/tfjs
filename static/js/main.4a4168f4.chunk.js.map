{"version":3,"sources":["components/OD.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["UseWindowDimensions","getWindowDimensions","window","width","innerWidth","height","innerHeight","useState","windowDimensions","setWindowDimensions","useEffect","onResize","addEventListener","removeEventListener","ObjectDetector","isCameraEnable","setCameraEnable","canvasRef","useRef","console","log","Button","variant","color","onClick","IconButton","disabled","ref","style","margin","border","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAKaA,EAAsB,WAC/B,IAAMC,EAAsB,WACxB,MAAmDC,OACnD,MAAO,CAAEC,MADT,EAAQC,WACQC,OADhB,EAA2BC,cAG/B,EAAgDC,mBAASN,KAAzD,mBAAOO,EAAP,KAAyBC,EAAzB,KAQA,OAPAC,qBAAU,WACN,IAAMC,EAAW,WACbF,EAAoBR,MAGxB,OADAC,OAAOU,iBAAiB,SAAUD,GAC3B,kBAAMT,OAAOW,oBAAoB,SAAUF,MACnD,IACIH,GAGEM,EAA2B,WACpC,MAA0CP,oBAAkB,GAA5D,mBAAOQ,EAAP,KAAuBC,EAAvB,KACA,EAA0BhB,IAAlBG,EAAR,EAAQA,MAAOE,EAAf,EAAeA,OACTY,EAAYC,iBAA0B,MAE5C,OADAC,QAAQC,IAAIpB,KAER,gCACKe,GACG,cAACM,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,kBAAMR,GAAgB,IAA3E,mBAEHD,GACG,cAACM,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,kBAAMR,GAAgB,IAA3E,iBAEJ,eAACS,EAAA,EAAD,CAAYC,UAAWX,EAAvB,UACKA,GACG,cAAC,IAAD,CAAmBQ,MAAM,aAE5BR,GACG,cAAC,IAAD,CAAmBQ,MAAM,eAGjC,wBACII,IAAKV,EACLW,MAAO,CACHC,OAAQ,OACR1B,MAAOA,EACPE,OAAe,GAAPA,EACRyB,OAAQ,mBCjCbC,EAVO,WACpB,OACE,8BAGE,cAAC,EAAD,OCISC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4a4168f4.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { IconButton } from '@material-ui/core';\nimport FlipCameraIosIcon from '@material-ui/icons/FlipCameraIos';\n\nexport const UseWindowDimensions = () => {\n    const getWindowDimensions = () => {\n        const { innerWidth: width, innerHeight: height } = window;\n        return { width, height }\n    }\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n    useEffect(() => {\n        const onResize = () => {\n            setWindowDimensions(getWindowDimensions());\n        }\n        window.addEventListener('resize', onResize);\n        return () => window.removeEventListener('resize', onResize);\n    }, []);\n    return windowDimensions;\n}\n\nexport const ObjectDetector: React.FC = () => {\n    const [isCameraEnable, setCameraEnable] = useState<boolean>(false);\n    const { width, height } = UseWindowDimensions();\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    console.log(UseWindowDimensions());\n    return (\n        <div>\n            {isCameraEnable || \n                <Button variant='contained' color='primary' onClick={() => setCameraEnable(true)}>start</Button>\n            }\n            {isCameraEnable &&\n                <Button variant='contained' color='primary' onClick={() => setCameraEnable(false)}>end</Button>\n            }\n            <IconButton disabled={!isCameraEnable}>\n                {isCameraEnable ||\n                    <FlipCameraIosIcon color='disabled'/>\n                }\n                {isCameraEnable &&\n                    <FlipCameraIosIcon color='primary'/>\n                }\n            </IconButton>\n            <canvas\n                ref={canvasRef}\n                style={{\n                    margin: 'auto',\n                    width: width,\n                    height: height*0.9,\n                    border: '1px solid',\n                }}\n            />\n        </div>\n    );\n}","import React from 'react';\nimport { Detector } from './components/Detector';\nimport { Camera } from './components/Webcam';\nimport { ObjectDetector } from './components/OD';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      {/* <Detector /> */}\n      {/* <Camera /> */}\n      <ObjectDetector />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}